openapi: 3.0.3
info:
  title: Pet Store API
  description: A simple API to manage a pet store inventory.
  version: 1.0.0
  contact:
    name: API Support
    email: support@petstore.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.petstore.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Local development server

paths:
  /pets:
    get:
      summary: List all pets
      description: Returns a list of all pets in the store.
      operationId: listPets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new pet
      description: Adds a new pet to the store inventory.
      operationId: createPet
      requestBody:
        description: Pet object to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetInput'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pets/{petId}:
    get:
      summary: Get a pet by ID
      description: Returns a single pet based on its ID.
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of the pet to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a pet
      description: Removes a pet from the store by ID.
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: ID of the pet to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - species
      properties:
        id:
          type: string
          example: "pet_123"
        name:
          type: string
          example: "Fluffy"
        species:
          type: string
          enum:
            - dog
            - cat
            - bird
          example: "dog"
        age:
          type: integer
          minimum: 0
          example: 3
        owner:
          type: string
          example: "John Doe"
    PetInput:
      type: object
      required:
        - name
        - species
      properties:
        name:
          type: string
          example: "Fluffy"
        species:
          type: string
          enum:
            - dog
            - cat
            - bird
          example: "dog"
        age:
          type: integer
          minimum: 0
          example: 3
        owner:
          type: string
          example: "John Doe"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Invalid request"